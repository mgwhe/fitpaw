<div class="row">
    <div class="col-sm-6">
        <canvas id="calorieChart" width="400" height="400"></canvas>
    </div>

    <div class="col-sm-6">
        <div class="row">
            <div class="col-sm-6">
                <canvas id="macroChartDay" width="600" height="600"></canvas>
            </div>
            <div class="col-sm-6">
                <canvas id="macroChartWeek" width="600" height="600"></canvas>
            </div>
        </div>
    </div>
</row>

<script>

var chartDataCalories = 
    {
        type: 'bar',
        data: {
            labels: [] //code in above floating week
            ,
            datasets: [{
                label: 'Total Daily Calories',
                data: [], //load data via Ajax call below
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1,
                order: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    }

    charPieMacrosDay = {
    datasets: [{
        label: 'Macronutrients for Day',
        data: [10, 20, 30],
        backgroundColor: [
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
        borderColor: [
                    'rgba(75, 192, 192, .5)',
                    'rgba(54, 162, 235, .5)',
                    'rgba(255, 206, 86, .5)'
        ]
    }],
    //labels appear in the legend and in the tooltips when hovering different segments
    labels: [
        'Protein',
        'Carbohydrates',
        'Fat'
    ]
};
    
    charPieMacrosWeek = {
    datasets: [{
        label: 'Macronutrients for Week',
        data: [15, 40, 30],
        backgroundColor: [
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
        borderColor: [
                    'rgba(75, 192, 192, .5)',
                    'rgba(54, 162, 235, .5)',
                    'rgba(255, 206, 86, .5)'
        ]
    }],
    //labels appear in the legend and in the tooltips when hovering different segments
    labels: [
        'Protein',
        'Carbohydrates',
        'Fat'
    ]
};
    //Calories bar grapth
    var ctxCalorieBar = document.getElementById('calorieChart').getContext('2d');
    //Macro pie day
    var ctxMacroPieDay = document.getElementById('macroChartDay').getContext('2d'); 
    //Macro pie week
    var ctxMacroPieWeek = document.getElementById('macroChartWeek').getContext('2d'); 

    var daysLabelsArray = [];

    var calorieChart, macroChart;

    DrawCalorieBarGraph();
    DrawPieGraphDay();
    DrawPieGraphWeek();

    function DrawPieGraphDay(){

        macroChartDay = new Chart(ctxMacroPieDay, {
            type: 'pie',
            data: charPieMacrosDay
           // options: options
        });
    }

    function DrawPieGraphWeek(){

        macroChartWeek = new Chart(ctxMacroPieWeek, {
            type: 'pie',
            data: charPieMacrosWeek
        // options: options
        });
    }
    
    //async with await needed down the call line as $get is asynchronous at bottom
    async function DrawCalorieBarGraph(){

        let totalCalories =  await getDailyCalories();

        //populate graph data 
        totalCalories.forEach(dailyCalories =>{
                
            if(isNaN(dailyCalories)) //check undefined, null,etc and put 0 so at least it draws
            {
                chartDataCalories.data.datasets[0].data.push(0); //based on sample chart.js code this is the location where it picks it up from in the chart control
            }
            else
            {
                chartDataCalories.data.datasets[0].data.push(dailyCalories); //this is the location where it picks it up from
            }
        }); //forEach

        let recommendedCalories = {
            label: 'Target Calorie Intake',
            data: [500, 500, 500, 500,500,500,500],
            type: 'line',
            order: 2
            };

            chartDataCalories.data.datasets.push(recommendedCalories);

        //calculate the names of the last 7 day of week from today and attached to bar grapth 
        loadLabels();
        //attach the data to the chart and draw
        calorieChart = new Chart(ctxCalorieBar,chartDataCalories);  
            
    }

        async function getDailyCalories(){
            
            let nutrientTotals = [];
            let totalCalories = [];

            for (var index = 6; index > -1; index--) { //do 7 calls, one for each day of last week till today
                    //extract string date in format yyyy-mm-dd
                    let thisDate = new Date(Date.now() - index * 24 * 60 * 60 * 1000).toISOString().substring(0,10); 
                    console.log(thisDate);
                    
                    //getNutrientsTotals does the DB lookup and return sum of each key nutients over start end dates 
                    //here use it a day of the week by setting the start and end dates the same
                    
                    nutrientTotals = await getNutrientsTotals(thisDate, thisDate); 
                    
                    console.log("nutrientTotals:"+nutrientTotals);
                    console.log("nutrientTotals[0]:"+nutrientTotals[0]);

                    totalCalories.push(nutrientTotals.data.foodItemTotals[0]); //0 contains calories (1=fat, etc.)
            }

            return totalCalories;
        }

        async function getNutrientsTotals(startDate, endDate){
  
            let stringAPIEndpointTotals = "/api/food_nutrients_totals/"+startDate+"."+endDate; //Dot is used as separator as indicated in route
            console.log("About to call to: "+stringAPIEndpointTotals);

            let queryResults =  await $.get(stringAPIEndpointTotals, (results ={}) =>{
            
            let data = results.data;
            if (!data || !data.foodItemTotals){  
                            
            return;
            }            
            
            console.log("foodItemTotals in call are: "+data.foodItemTotals);
            console.log("calories in call are: "+data.foodItemTotals[0]);
            return data.foodItemTotals;
            
            }); //AJAX call
            
            return queryResults;
        }

        function getDaysOfWeekLabels(){
            var dayOfWeekLabels = [];

            var tmpDate = new Date();
            
            var i;

            tmpDate.setDate(tmpDate.getDate()-7); //start a week ago

            for(i=0;i<7;i++)
            { 
                var tmpDayString = tmpDate.toString().split(' ')[0]; 
                dayOfWeekLabels.push(tmpDayString);
                tmpDate.setDate(tmpDate.getDate() + 1); //advance to next
            }
            
            return dayOfWeekLabels;
        }
        function loadLabels()
        {
            daysLabelsArray = getDaysOfWeekLabels();
            daysLabelsArray.forEach(dayLabel =>{
            chartDataCalories.data.labels.push(dayLabel);
    });
        }
    </script>
</div>

<!--Nutrition table -->
<div class="row">
    <div class="col-sm-12">

              <script type="text/javascript">
                 
                 window.onload = (event) => {
                    
                    getNutrients();
                };
                 
                  function getNutrients()
                  {     
                        console.log("about to call GET api/food_nutrients/dates/");

                        let endDate = new Date().toISOString().substring(0,10);
                        let startDate = new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString().substring(0,10); //A week ago

                        var stringAPIEndpoint = "/api/food_nutrients/dates/"+startDate+"."+endDate;
                        
                        
                        $.get(stringAPIEndpoint, (results ={}) =>{
                         
                          //clear down table rows from before
                          var table = document.getElementById("nutrientsTable");
                          var rowCount = CountRows(); //dont want to delete headers
                          
                          for(i=0;i<rowCount;i++){
                                table.deleteRow(-1); //deletes from the bottom up
                          }
                         
                          let data = results.data;
                         if (!data || !data.foodNutrients){                
                            return;
                          }
                           
                          var tableRef = table.getElementsByTagName('tbody')[0];

                          console.log("also returned totals: "+JSON.stringify(data.foodItemTotals));

                          let qtyIndex = 0;


                            data.foodNutrients.forEach(foodItem => {
                                
                                var row = tableRef.insertRow(-1);
                               
                                var food_eaten_date_cell = row.insertCell(0); 
                                var meal_number_cell = row.insertCell(1); 
                                var food_name_cell = row.insertCell(2); 
                                var food_quantity_cell = row.insertCell(3);
                                var food_units_cell = row.insertCell(4);
                                
                                var calories_cell = row.insertCell(5);
                                calories_cell.setAttribute("class", "text-right"); //set all numbers right
                                
                                var fat_cell = row.insertCell(6);
                                fat_cell.setAttribute("class", "text-right");
                                
                                var protein_cell = row.insertCell(7);
                                protein_cell.setAttribute("class", "text-right");
                                
                                var carbohydrates_cell = row.insertCell(8);
                                carbohydrates_cell.setAttribute("class", "text-right");

                                var fibre_cell = row.insertCell(9);
                                fibre_cell.setAttribute("class", "text-right");

                                var fat_saturated_cell = row.insertCell(10);
                                fat_saturated_cell.setAttribute("class", "text-right");
                                
                                var sugar_cell = row.insertCell(11);
                                sugar_cell.setAttribute("class", "text-right");

                                var sodium_cell = row.insertCell(12);
                                sodium_cell.setAttribute("class", "text-right");

                                //Add data elements to new row
                                food_eaten_date_cell.innerHTML = data.foodItemsDetails[qtyIndex].foodDate;
                                meal_number_cell.innerHTML = data.foodItemsDetails[qtyIndex].mealNumber;
                                food_name_cell.innerHTML = capital_letter(foodItem.foodName);   
                                
                                //this data comes from foodItems rather than general nutrition DB info
                                //so attached to another object in the HTTP response
                                food_quantity_cell.innerHTML = data.foodItemsDetails[qtyIndex].foodQuantity;  
                                qtyIndex++;

                                food_units_cell.innerHTML = foodItem.foodServingUnit;  
                                calories_cell.innerHTML = Math.round(foodItem.calories);
                                fat_cell.innerHTML = Math.round(foodItem.fat);
                                protein_cell.innerHTML = Math.round(foodItem.protein);
                                carbohydrates_cell.innerHTML = Math.round(foodItem.carbohydrates);
                                fibre_cell.innerHTML = Math.round(foodItem.fibre);
                                fat_saturated_cell.innerHTML = Math.round(foodItem.fat_saturated);
                                sugar_cell.innerHTML = Math.round(foodItem.sugar);
                                sodium_cell.innerHTML = Math.round(foodItem.sodium);

                            }) //forEach     

                            //Add in totals:
                            var row = tableRef.insertRow(-1);

                            row.style.fontWeight = "500";   

                            var food_eaten_date_cell = row.insertCell(0); 
                            var meal_number_cell = row.insertCell(1); 
                            var food_name_cell = row.insertCell(2); 
                            var food_quantity_cell = row.insertCell(3);
                            var food_units_cell = row.insertCell(4);
                            food_units_cell.setAttribute("class", "text-right"); //Set Totals right
                            
                            var calories_cell = row.insertCell(5);
                            calories_cell.setAttribute("class", "text-right"); //set all numbers right
                            
                            var fat_cell = row.insertCell(6);
                            fat_cell.setAttribute("class", "text-right");
                            
                            var protein_cell = row.insertCell(7);
                            protein_cell.setAttribute("class", "text-right");
                            
                            var carbohydrates_cell = row.insertCell(8);
                            carbohydrates_cell.setAttribute("class", "text-right");

                            var fibre_cell = row.insertCell(9);
                            fibre_cell.setAttribute("class", "text-right");

                            var fat_saturated_cell = row.insertCell(10);
                            fat_saturated_cell.setAttribute("class", "text-right");
                            
                            var sugar_cell = row.insertCell(11);
                            sugar_cell.setAttribute("class", "text-right");

                            var sodium_cell = row.insertCell(12);
                            sodium_cell.setAttribute("class", "text-right");

                            food_eaten_date_cell="";
                            meal_number_cell="";
                            food_name_cell.innerHTML = "";   
                            food_quantity_cell.innerHTML = "";  
                            food_units_cell.innerHTML = "Totals:";  
                            calories_cell.innerHTML = Math.round(data.foodItemTotals[0]);
                            fat_cell.innerHTML = Math.round(data.foodItemTotals[1]);
                            protein_cell.innerHTML = Math.round(data.foodItemTotals[2]);
                            carbohydrates_cell.innerHTML = Math.round(data.foodItemTotals[3]);
                            fibre_cell.innerHTML = Math.round(data.foodItemTotals[4]);
                            fat_saturated_cell.innerHTML = Math.round(data.foodItemTotals[5]);
                            sugar_cell.innerHTML = Math.round(data.foodItemTotals[6]);
                            sodium_cell.innerHTML = Math.round(data.foodItemTotals[7]);
                       
                        }); //AJAX call

                  } //function
             
                   function CountRows() {
                      var totalRowCount = 0;
                      var rowCount = 0;
                      var table = document.getElementById("nutrientsTable");
                      var rows = table.getElementsByTagName("tr")
                      for (var i = 0; i < rows.length; i++) {
                          totalRowCount++;
                          if (rows[i].getElementsByTagName("td").length > 0) {
                              rowCount++;
                          }
                      }
                      return rowCount;
                  }
              </script>


        <!--w-auto automatically widens column to fit content
            source:https://mdbootstrap.com/docs/jquery/tables/responsive/
        -->
        <table class="table table-striped w-auto table-responsive" id="nutrientsTable">
            <thead nowrap="nowrap">
            <tr>
                <th>Date</th>
                <th>Meal</th>
                <th>Food Name</th>
                <th>Qty</th>
                <th>Food Units</th>
                <th>Calories</th>
                <th>Fat</th>
                <th>Protein</th>
                <th>Carbs</th>
                <th>Fibre</th>
                <th>Sat. Fat</th>
                <th>Sugar</th>
                <th>Sodium</th>
            </tr>
            </thead>
            <tbody>
            
            </tbody>
        </table>
    </div> <!--Row-->           
</div> <!--Row-->
